/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { QuestionFrame, QuestionFrameInterface } from "../QuestionFrame";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "questionLabels",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "option",
        type: "uint256",
      },
    ],
    name: "accept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum EXTRAS",
        name: "option",
        type: "uint8",
      },
    ],
    name: "acceptExtra",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newDescription",
        type: "string",
      },
    ],
    name: "editDescription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "outputQuestionInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "labels",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "scores",
            type: "uint256[]",
          },
          {
            internalType: "uint256[3]",
            name: "extras",
            type: "uint256[3]",
          },
          {
            internalType: "uint256",
            name: "totalVoters",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct QuestionInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600a805460ff191690553480156200001b57600080fd5b5060405162001093380380620010938339810160408190526200003e9162000319565b33620000905760405162461bcd60e51b815260206004820152601760248201527f56616c696420616464726573732072657175697265642e000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0385161790558151620000c090600190602085019062000195565b5060005b81518160ff16101562000167576003828260ff1681518110620000eb57620000eb62000434565b602090810291909101810151825460018101845560009384529282902081516200011f949190910192919091019062000195565b506004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155806200015e816200044a565b915050620000c4565b5050600060098190556001600160a01b03909216825250600860205260409020805460ff19169055620004b6565b828054620001a39062000479565b90600052602060002090601f016020900481019282620001c7576000855562000212565b82601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b5b8082111562000220576000815560010162000225565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200027c576200027c6200023b565b604052919050565b600082601f8301126200029657600080fd5b81516001600160401b03811115620002b257620002b26200023b565b6020620002c8601f8301601f1916820162000251565b8281528582848701011115620002dd57600080fd5b60005b83811015620002fd578581018301518282018401528201620002e0565b838111156200030f5760008385840101525b5095945050505050565b6000806000606084860312156200032f57600080fd5b83516001600160a01b03811681146200034757600080fd5b602085810151919450906001600160401b03808211156200036757600080fd5b620003758883890162000284565b945060408701519150808211156200038c57600080fd5b818701915087601f830112620003a157600080fd5b815181811115620003b657620003b66200023b565b8060051b620003c785820162000251565b918252838101850191858101908b841115620003e257600080fd5b86860192505b838310156200042357825185811115620004025760008081fd5b620004128d89838a010162000284565b8352509186019190860190620003e8565b809750505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8114156200047057634e487b7160e01b600052601160045260246000fd5b60010192915050565b600181811c908216806200048e57607f821691505b60208210811415620004b057634e487b7160e01b600052602260045260246000fd5b50919050565b610bcd80620004c66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d22b83c1461005157806319b05f491461006f5780633c2f79d214610084578063a6fedc7014610097575b600080fd5b6100596100aa565b6040516100669190610909565b60405180910390f35b61008261007d3660046109d0565b6103a5565b005b6100826100923660046109e9565b61049d565b6100826100a5366004610a11565b610553565b6100b26106f5565b336100d85760405162461bcd60e51b81526004016100cf90610a83565b60405180910390fd5b336000908152600860209081526040808320548151610100810190925292546001600160a01b031681526001805460ff90941693919283019161011a90610aba565b80601f016020809104026020016040519081016040528092919081815260200182805461014690610aba565b80156101935780601f1061016857610100808354040283529160200191610193565b820191906000526020600020905b81548152906001019060200180831161017657829003601f168201915b50505050508152602001600280546101aa90610aba565b80601f01602080910402602001604051908101604052809291908181526020018280546101d690610aba565b80156102235780601f106101f857610100808354040283529160200191610223565b820191906000526020600020905b81548152906001019060200180831161020657829003601f168201915b505050505081526020016003805480602002602001604051908101604052809291908181526020016000905b828210156102fb57838290600052602060002001805461026e90610aba565b80601f016020809104026020016040519081016040528092919081815260200182805461029a90610aba565b80156102e75780601f106102bc576101008083540402835291602001916102e7565b820191906000526020600020905b8154815290600101906020018083116102ca57829003601f168201915b50505050508152602001906001019061024f565b505050508152602001600480548060200260200160405190810160405280929190818152602001828054801561035057602002820191906000526020600020905b81548152602001906001019080831161033c575b50505091835250506040805160608101918290526020909201919060059060039082845b8154815260200190600101908083116103745750505050508152602001600954815260200182151581525091505090565b600a5460ff16156103c85760405162461bcd60e51b81526004016100cf90610af5565b600a805460ff191660011790553360009081526008602052604090205460ff16156104355760405162461bcd60e51b815260206004820152601e60248201527f416c726561647920706572666f726d656420766f7465206f7074696f6e73000060448201526064016100cf565b336104525760405162461bcd60e51b81526004016100cf90610a83565b61045b81610564565b336000908152600860205260408120805460ff19166001908117909155600980549192909161048b908490610b45565b9091555050600a805460ff1916905550565b600a5460ff16156104c05760405162461bcd60e51b81526004016100cf90610af5565b600a805460ff191660011790553360009081526008602052604090205460ff161561052d5760405162461bcd60e51b815260206004820152601e60248201527f416c726561647920706572666f726d656420766f7465206f7074696f6e73000060448201526064016100cf565b3361054a5760405162461bcd60e51b81526004016100cf90610a83565b61045b81610604565b61055f60028383610749565b505050565b600354819081106105cd5760405162461bcd60e51b815260206004820152602d60248201527f4e6f6e206578697374696e67206f7074696f6e2e20547279207769746820646960448201526c66666572656e742076616c756560981b60648201526084016100cf565b6001600483815481106105e2576105e2610b6b565b9060005260206000200160008282546105fb9190610b45565b90915550505050565b80600281111561061657610616610b81565b6003811061067b5760405162461bcd60e51b815260206004820152602c60248201527f506172616d65746572206f757473696465206f662072616e6765206f6620766160448201526b3634b21037b83a34b7b7399760a11b60648201526084016100cf565b600082600281111561068f5761068f610b81565b14156106b7576001600560005b0160008282546106ac9190610b45565b909155506106f19050565b60018260028111156106cb576106cb610b81565b14156106db57600160058161069c565b6001600560020160008282546105fb9190610b45565b5050565b60405180610100016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016107356107cd565b815260006020820181905260409091015290565b82805461075590610aba565b90600052602060002090601f01602090048101928261077757600085556107bd565b82601f106107905782800160ff198235161785556107bd565b828001600101855582156107bd579182015b828111156107bd5782358255916020019190600101906107a2565b506107c99291506107eb565b5090565b60405180606001604052806003906020820280368337509192915050565b5b808211156107c957600081556001016107ec565b6000815180845260005b818110156108265760208185018101518683018201520161080a565b81811115610838576000602083870101525b50601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561089857601f19868403018952610886838351610800565b9884019892509083019060010161086a565b5090979650505050505050565b600081518084526020808501945080840160005b838110156108d5578151875295820195908201906001016108b9565b509495945050505050565b8060005b60038110156109035781518452602093840193909101906001016108e4565b50505050565b602081526109236020820183516001600160a01b03169052565b60006020830151610140806040850152610941610160850183610800565b91506040850151601f198086850301606087015261095f8483610800565b9350606087015191508086850301608087015261097c848361084d565b935060808701519150808685030160a08701525061099a83826108a5565b92505060a08501516109af60c08601826108e0565b5060c085015161012085015260e09094015115159390920192909252919050565b6000602082840312156109e257600080fd5b5035919050565b6000602082840312156109fb57600080fd5b813560038110610a0a57600080fd5b9392505050565b60008060208385031215610a2457600080fd5b823567ffffffffffffffff80821115610a3c57600080fd5b818501915085601f830112610a5057600080fd5b813581811115610a5f57600080fd5b866020828501011115610a7157600080fd5b60209290920196919550909350505050565b60208082526017908201527f56616c696420616464726573732072657175697265642e000000000000000000604082015260600190565b600181811c90821680610ace57607f821691505b60208210811415610aef57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526030908201527f4d6574686f642061726561647920657865637574696e672e204e6f2072652d6560408201526f373a3930b731bc9030b63637bbb2b21760811b606082015260800190565b60008219821115610b6657634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220db0d0a79d8812a42f26aeef7c48f0f40dccd606e05d1f9ae806153662c3249b564736f6c63430008090033";

type QuestionFrameConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuestionFrameConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class QuestionFrame__factory extends ContractFactory {
  constructor(...args: QuestionFrameConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<QuestionFrame> {
    return super.deploy(
      _owner,
      _title,
      questionLabels,
      overrides || {}
    ) as Promise<QuestionFrame>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _title,
      questionLabels,
      overrides || {}
    );
  }
  override attach(address: string): QuestionFrame {
    return super.attach(address) as QuestionFrame;
  }
  override connect(signer: Signer): QuestionFrame__factory {
    return super.connect(signer) as QuestionFrame__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuestionFrameInterface {
    return new utils.Interface(_abi) as QuestionFrameInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): QuestionFrame {
    return new Contract(address, _abi, signerOrProvider) as QuestionFrame;
  }
}
