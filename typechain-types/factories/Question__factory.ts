/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Question, QuestionInterface } from "../Question";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "questionLabels",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
    ],
    name: "accept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "newLabel",
        type: "string",
      },
    ],
    name: "editLabel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLabels",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getScores",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
    ],
    name: "score",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620009bd380380620009bd8339810160408190526200003491620001cf565b60005b81518160ff161015620000d8576001828260ff16815181106200005e576200005e6200031b565b60209081029190910181015182546001810184556000938452928290208151620000929491909101929190910190620000e0565b50600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563015580620000cf8162000331565b91505062000037565b50506200039d565b828054620000ee9062000360565b90600052602060002090601f0160209004810192826200011257600085556200015d565b82601f106200012d57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015d57825182559160200191906001019062000140565b506200016b9291506200016f565b5090565b5b808211156200016b576000815560010162000170565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001c757620001c762000186565b604052919050565b60006020808385031215620001e357600080fd5b82516001600160401b0380821115620001fb57600080fd5b8185019150601f86818401126200021157600080fd5b82518281111562000226576200022662000186565b8060051b620002378682016200019c565b918252848101860191868101908a8411156200025257600080fd5b87870192505b838310156200030d57825186811115620002725760008081fd5b8701603f81018c13620002855760008081fd5b88810151878111156200029c576200029c62000186565b620002af818801601f19168b016200019c565b81815260408e81848601011115620002c75760008081fd5b60005b83811015620002e7578481018201518382018e01528c01620002ca565b83811115620002f95760008d85850101525b505084525050918701919087019062000258565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8114156200035757634e487b7160e01b600052601160045260246000fd5b60010192915050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b61061080620003ad6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319b05f491461005c5780631ea1380c146100715780634abd18ab1461008f578063538faa8c146100a4578063d1730f1f146100b7575b600080fd5b61006f61006a3660046103a8565b6100d8565b005b61007961013b565b60405161008691906103c1565b60405180910390f35b610097610193565b6040516100869190610405565b61006f6100b23660046104a0565b61026c565b6100ca6100c53660046103a8565b6102c2565b604051908152602001610086565b600154819081106101045760405162461bcd60e51b81526004016100fb9061051c565b60405180910390fd5b60016000838154811061011957610119610569565b906000526020600020016000828254610132919061057f565b90915550505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561018957602002820191906000526020600020905b815481526020019060010190808311610175575b5050505050905090565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156102635783829060005260206000200180546101d6906105a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610202906105a5565b801561024f5780601f106102245761010080835404028352916020019161024f565b820191906000526020600020905b81548152906001019060200180831161023257829003601f168201915b5050505050815260200190600101906101b7565b50505050905090565b6001548390811061028f5760405162461bcd60e51b81526004016100fb9061051c565b8282600186815481106102a4576102a4610569565b9060005260206000200191906102bb92919061030f565b5050505050565b600154600090829081106102e85760405162461bcd60e51b81526004016100fb9061051c565b600083815481106102fb576102fb610569565b906000526020600020015491505b50919050565b82805461031b906105a5565b90600052602060002090601f01602090048101928261033d5760008555610383565b82601f106103565782800160ff19823516178555610383565b82800160010185558215610383579182015b82811115610383578235825591602001919060010190610368565b5061038f929150610393565b5090565b5b8082111561038f5760008155600101610394565b6000602082840312156103ba57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156103f9578351835292840192918401916001016103dd565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561049257888603603f1901855282518051808852835b81811015610462578281018a01518982018b01528901610447565b8181111561047257848a838b0101525b50601f01601f19169690960187019550938601939186019160010161042d565b509398975050505050505050565b6000806000604084860312156104b557600080fd5b83359250602084013567ffffffffffffffff808211156104d457600080fd5b818601915086601f8301126104e857600080fd5b8135818111156104f757600080fd5b87602082850101111561050957600080fd5b6020830194508093505050509250925092565b6020808252602d908201527f566f74696e6720656c656d656e74206f757473696465206f662074686520717560408201526c195cdd1a5bdb9cc8189bdd5b99609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600082198211156105a057634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806105b957607f821691505b6020821081141561030957634e487b7160e01b600052602260045260246000fdfea2646970667358221220ec63e45d78ec66b732bc9bd20b3652d4ccfdc2e4160def64555fe0bd2ae5953364736f6c63430008090033";

type QuestionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuestionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question__factory extends ContractFactory {
  constructor(...args: QuestionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Question> {
    return super.deploy(questionLabels, overrides || {}) as Promise<Question>;
  }
  override getDeployTransaction(
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(questionLabels, overrides || {});
  }
  override attach(address: string): Question {
    return super.attach(address) as Question;
  }
  override connect(signer: Signer): Question__factory {
    return super.connect(signer) as Question__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuestionInterface {
    return new utils.Interface(_abi) as QuestionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question {
    return new Contract(address, _abi, signerOrProvider) as Question;
  }
}
