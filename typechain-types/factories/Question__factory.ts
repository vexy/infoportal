/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Question, QuestionInterface } from "../Question";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "questionLabels",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
    ],
    name: "accept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum EXTRAS",
        name: "option",
        type: "uint8",
      },
    ],
    name: "acceptExtra",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newDescription",
        type: "string",
      },
    ],
    name: "editDescription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "produceQuestionMeta",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "labels",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "scores",
            type: "uint256[]",
          },
          {
            internalType: "uint256[3]",
            name: "extras",
            type: "uint256[3]",
          },
        ],
        internalType: "struct QuestionMeta",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d5c38038062000d5c833981016040819052620000349162000299565b600080546001600160a01b0319166001600160a01b03851617905581516200006490600190602085019062000115565b5060005b81518160ff1610156200010b576003828260ff16815181106200008f576200008f620003b4565b60209081029190910181015182546001810184556000938452928290208151620000c3949190910192919091019062000115565b506004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155806200010281620003ca565b91505062000068565b5050505062000436565b8280546200012390620003f9565b90600052602060002090601f01602090048101928262000147576000855562000192565b82601f106200016257805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019257825182559160200191906001019062000175565b50620001a0929150620001a4565b5090565b5b80821115620001a05760008155600101620001a5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001fc57620001fc620001bb565b604052919050565b600082601f8301126200021657600080fd5b81516001600160401b03811115620002325762000232620001bb565b602062000248601f8301601f19168201620001d1565b82815285828487010111156200025d57600080fd5b60005b838110156200027d57858101830151828201840152820162000260565b838111156200028f5760008385840101525b5095945050505050565b600080600060608486031215620002af57600080fd5b83516001600160a01b0381168114620002c757600080fd5b602085810151919450906001600160401b0380821115620002e757600080fd5b620002f58883890162000204565b945060408701519150808211156200030c57600080fd5b818701915087601f8301126200032157600080fd5b815181811115620003365762000336620001bb565b8060051b62000347858201620001d1565b918252838101850191858101908b8411156200036257600080fd5b86860192505b83831015620003a357825185811115620003825760008081fd5b620003928d89838a010162000204565b835250918601919086019062000368565b809750505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415620003f057634e487b7160e01b600052601160045260246000fd5b60010192915050565b600181811c908216806200040e57607f821691505b602082108114156200043057634e487b7160e01b600052602260045260246000fd5b50919050565b61091680620004466000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806319b05f491461005157806337372451146100665780633c2f79d214610084578063a6fedc7014610097575b600080fd5b61006461005f36600461060a565b6100aa565b005b61006e61014f565b60405161007b91906106d4565b60405180910390f35b6100646100923660046107b9565b6103fd565b6100646100a53660046107e1565b6104fe565b600354819081106101185760405162461bcd60e51b815260206004820152602d60248201527f4e6f6e206578697374696e67206f7074696f6e2e20547279207769746820646960448201526c66666572656e742076616c756560981b60648201526084015b60405180910390fd5b60016004838154811061012d5761012d610853565b9060005260206000200160008282546101469190610869565b90915550505050565b61015761050f565b6040805160c081019091526000546001600160a01b03168152600180546020830191906101839061088f565b80601f01602080910402602001604051908101604052809291908181526020018280546101af9061088f565b80156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b50505050508152602001600280546102139061088f565b80601f016020809104026020016040519081016040528092919081815260200182805461023f9061088f565b801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b505050505081526020016003805480602002602001604051908101604052809291908181526020016000905b828210156103645783829060005260206000200180546102d79061088f565b80601f01602080910402602001604051908101604052809291908181526020018280546103039061088f565b80156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b5050505050815260200190600101906102b8565b50505050815260200160048054806020026020016040519081016040528092919081815260200182805480156103b957602002820191906000526020600020905b8154815260200190600101908083116103a5575b50505091835250506040805160608101918290526020909201919060059060039082845b8154815260200190600101908083116103dd575050505050815250905090565b80600281111561040f5761040f6108ca565b600381106104745760405162461bcd60e51b815260206004820152602c60248201527f506172616d65746572206f757473696465206f662072616e6765206f6620766160448201526b3634b21037b83a34b7b7399760a11b606482015260840161010f565b6000826002811115610488576104886108ca565b14156104c0576001600560005b600381106104a5576104a5610853565b0160008282546104b59190610869565b909155506104fa9050565b60018260028111156104d4576104d46108ca565b14156104e4576001600581610495565b6001600560020160008282546101469190610869565b5050565b61050a60028383610553565b505050565b6040518060c0016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016060815260200161054e6105d7565b905290565b82805461055f9061088f565b90600052602060002090601f01602090048101928261058157600085556105c7565b82601f1061059a5782800160ff198235161785556105c7565b828001600101855582156105c7579182015b828111156105c75782358255916020019190600101906105ac565b506105d39291506105f5565b5090565b60405180606001604052806003906020820280368337509192915050565b5b808211156105d357600081556001016105f6565b60006020828403121561061c57600080fd5b5035919050565b6000815180845260005b818110156106495760208185018101518683018201520161062d565b8181111561065b576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156106a057815187529582019590820190600101610684565b509495945050505050565b8060005b60038110156106ce5781518452602093840193909101906001016106af565b50505050565b602080825282516001600160a01b03168282015282810151610100604084015260009190610706610120850182610623565b90506040850151601f19808684030160608701526107248383610623565b60608801518782038301608089015280518083529194508501925084840190600581901b8501860160005b8281101561077b5784878303018452610769828751610623565b9588019593880193915060010161074f565b5060808a01519650838982030160a08a01526107978188610670565b965050505050505060a08401516107b160c08501826106ab565b509392505050565b6000602082840312156107cb57600080fd5b8135600381106107da57600080fd5b9392505050565b600080602083850312156107f457600080fd5b823567ffffffffffffffff8082111561080c57600080fd5b818501915085601f83011261082057600080fd5b81358181111561082f57600080fd5b86602082850101111561084157600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561088a57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806108a357607f821691505b602082108114156108c457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212206b4d2e622a4d1708e412102f7a009e22f0b5b3ebf861cd39605ed4918d172d1364736f6c63430008090033";

type QuestionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuestionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question__factory extends ContractFactory {
  constructor(...args: QuestionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Question> {
    return super.deploy(
      _owner,
      _title,
      questionLabels,
      overrides || {}
    ) as Promise<Question>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _title,
      questionLabels,
      overrides || {}
    );
  }
  override attach(address: string): Question {
    return super.attach(address) as Question;
  }
  override connect(signer: Signer): Question__factory {
    return super.connect(signer) as Question__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuestionInterface {
    return new utils.Interface(_abi) as QuestionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question {
    return new Contract(address, _abi, signerOrProvider) as Question;
  }
}
