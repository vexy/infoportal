/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Question, QuestionInterface } from "../Question";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "questionLabels",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
    ],
    name: "accept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "newLabel",
        type: "string",
      },
    ],
    name: "editLabel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLabels",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getScores",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "element",
        type: "uint256",
      },
    ],
    name: "score",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f7e38038062000f7e833981810160405281019062000037919062000434565b60005b81518160ff161015620000e3576001828260ff168151811062000062576200006162000485565b5b6020026020010151908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190620000a4929190620000eb565b50600080806001815401808255809150506001900390600052602060002001600090919091909150558080620000da90620004f0565b9150506200003a565b505062000584565b828054620000f9906200054e565b90600052602060002090601f0160209004810192826200011d576000855562000169565b82601f106200013857805160ff191683800117855562000169565b8280016001018555821562000169579182015b82811115620001685782518255916020019190600101906200014b565b5b5090506200017891906200017c565b5090565b5b80821115620001975760008160009055506001016200017d565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001ff82620001b4565b810181811067ffffffffffffffff82111715620002215762000220620001c5565b5b80604052505050565b6000620002366200019b565b9050620002448282620001f4565b919050565b600067ffffffffffffffff821115620002675762000266620001c5565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620002a0576200029f620001c5565b5b620002ab82620001b4565b9050602081019050919050565b60005b83811015620002d8578082015181840152602081019050620002bb565b83811115620002e8576000848401525b50505050565b600062000305620002ff8462000282565b6200022a565b9050828152602081018484840111156200032457620003236200027d565b5b62000331848285620002b8565b509392505050565b600082601f830112620003515762000350620001af565b5b815162000363848260208601620002ee565b91505092915050565b6000620003836200037d8462000249565b6200022a565b90508083825260208201905060208402830185811115620003a957620003a862000278565b5b835b81811015620003f757805167ffffffffffffffff811115620003d257620003d1620001af565b5b808601620003e1898262000339565b85526020850194505050602081019050620003ab565b5050509392505050565b600082601f830112620004195762000418620001af565b5b81516200042b8482602086016200036c565b91505092915050565b6000602082840312156200044d576200044c620001a5565b5b600082015167ffffffffffffffff8111156200046e576200046d620001aa565b5b6200047c8482850162000401565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000620004fd82620004e3565b915060ff821415620005145762000513620004b4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200056757607f821691505b602082108114156200057e576200057d6200051f565b5b50919050565b6109ea80620005946000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319b05f491461005c5780631ea1380c146100785780634abd18ab14610096578063538faa8c146100b4578063d1730f1f146100d0575b600080fd5b61007660048036038101906100719190610483565b610100565b005b610080610182565b60405161008d919061056e565b60405180910390f35b61009e6101da565b6040516100ab91906106eb565b60405180910390f35b6100ce60048036038101906100c99190610772565b6102b3565b005b6100ea60048036038101906100e59190610483565b61032f565b6040516100f791906107e1565b60405180910390f35b806001805490508110610148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013f9061087f565b60405180910390fd5b60016000838154811061015e5761015d61089f565b5b90600052602060002001600082825461017791906108fd565b925050819055505050565b606060008054806020026020016040519081016040528092919081815260200182805480156101d057602002820191906000526020600020905b8154815260200190600101908083116101bc575b5050505050905090565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156102aa57838290600052602060002001805461021d90610982565b80601f016020809104026020016040519081016040528092919081815260200182805461024990610982565b80156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b5050505050815260200190600101906101fe565b50505050905090565b8260018054905081106102fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f29061087f565b60405180910390fd5b8282600186815481106103115761031061089f565b5b9060005260206000200191906103289291906103a0565b5050505050565b6000816001805490508110610379576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103709061087f565b60405180910390fd5b6000838154811061038d5761038c61089f565b5b9060005260206000200154915050919050565b8280546103ac90610982565b90600052602060002090601f0160209004810192826103ce5760008555610415565b82601f106103e757803560ff1916838001178555610415565b82800160010185558215610415579182015b828111156104145782358255916020019190600101906103f9565b5b5090506104229190610426565b5090565b5b8082111561043f576000816000905550600101610427565b5090565b600080fd5b600080fd5b6000819050919050565b6104608161044d565b811461046b57600080fd5b50565b60008135905061047d81610457565b92915050565b60006020828403121561049957610498610443565b5b60006104a78482850161046e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6104e58161044d565b82525050565b60006104f783836104dc565b60208301905092915050565b6000602082019050919050565b600061051b826104b0565b61052581856104bb565b9350610530836104cc565b8060005b8381101561056157815161054888826104eb565b975061055383610503565b925050600181019050610534565b5085935050505092915050565b600060208201905081810360008301526105888184610510565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105f65780820151818401526020810190506105db565b83811115610605576000848401525b50505050565b6000601f19601f8301169050919050565b6000610627826105bc565b61063181856105c7565b93506106418185602086016105d8565b61064a8161060b565b840191505092915050565b6000610661838361061c565b905092915050565b6000602082019050919050565b600061068182610590565b61068b818561059b565b93508360208202850161069d856105ac565b8060005b858110156106d957848403895281516106ba8582610655565b94506106c583610669565b925060208a019950506001810190506106a1565b50829750879550505050505092915050565b600060208201905081810360008301526107058184610676565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107325761073161070d565b5b8235905067ffffffffffffffff81111561074f5761074e610712565b5b60208301915083600182028301111561076b5761076a610717565b5b9250929050565b60008060006040848603121561078b5761078a610443565b5b60006107998682870161046e565b935050602084013567ffffffffffffffff8111156107ba576107b9610448565b5b6107c68682870161071c565b92509250509250925092565b6107db8161044d565b82525050565b60006020820190506107f660008301846107d2565b92915050565b600082825260208201905092915050565b7f566f74696e6720656c656d656e74206f757473696465206f662074686520717560008201527f657374696f6e7320626f756e6400000000000000000000000000000000000000602082015250565b6000610869602d836107fc565b91506108748261080d565b604082019050919050565b600060208201905081810360008301526108988161085c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109088261044d565b91506109138361044d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610948576109476108ce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061099a57607f821691505b602082108114156109ae576109ad610953565b5b5091905056fea26469706673582212207dc37ce27a16f4ef0d344d64551aaa88ba4b259d5d0146bd264c79b9d6ed92de64736f6c63430008090033";

type QuestionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuestionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Question__factory extends ContractFactory {
  constructor(...args: QuestionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Question> {
    return super.deploy(questionLabels, overrides || {}) as Promise<Question>;
  }
  override getDeployTransaction(
    questionLabels: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(questionLabels, overrides || {});
  }
  override attach(address: string): Question {
    return super.attach(address) as Question;
  }
  override connect(signer: Signer): Question__factory {
    return super.connect(signer) as Question__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuestionInterface {
    return new utils.Interface(_abi) as QuestionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Question {
    return new Contract(address, _abi, signerOrProvider) as Question;
  }
}
