/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface QuestionFrameInterface extends utils.Interface {
  functions: {
    "accept(uint256)": FunctionFragment;
    "editDescription(string)": FunctionFragment;
    "editTitle(string)": FunctionFragment;
    "getDescription()": FunctionFragment;
    "getExtras()": FunctionFragment;
    "getLabels()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getScores()": FunctionFragment;
    "getTitle()": FunctionFragment;
    "hasVoted()": FunctionFragment;
    "malformed()": FunctionFragment;
    "malformedCount()": FunctionFragment;
    "none()": FunctionFragment;
    "noneCount()": FunctionFragment;
    "report()": FunctionFragment;
    "reportCount()": FunctionFragment;
    "score(uint256)": FunctionFragment;
    "totalVoters()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accept"
      | "editDescription"
      | "editTitle"
      | "getDescription"
      | "getExtras"
      | "getLabels"
      | "getOwner"
      | "getScores"
      | "getTitle"
      | "hasVoted"
      | "malformed"
      | "malformedCount"
      | "none"
      | "noneCount"
      | "report"
      | "reportCount"
      | "score"
      | "totalVoters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accept",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editDescription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "editTitle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getExtras", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLabels", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getScores", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTitle", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasVoted", values?: undefined): string;
  encodeFunctionData(functionFragment: "malformed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "malformedCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "none", values?: undefined): string;
  encodeFunctionData(functionFragment: "noneCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "report", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "score",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVoters",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExtras", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLabels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getScores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTitle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "malformed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "malformedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "none", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "noneCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "score", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVoters",
    data: BytesLike
  ): Result;

  events: {};
}

export interface QuestionFrame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestionFrameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editTitle(
      newTitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDescription(overrides?: CallOverrides): Promise<[string]>;

    getExtras(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    getLabels(overrides?: CallOverrides): Promise<[string[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getScores(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTitle(overrides?: CallOverrides): Promise<[string]>;

    hasVoted(overrides?: CallOverrides): Promise<[boolean]>;

    malformed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    malformedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    none(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    noneCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    report(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    score(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVoters(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accept(
    element: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editDescription(
    newDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editTitle(
    newTitle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDescription(overrides?: CallOverrides): Promise<string>;

  getExtras(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getLabels(overrides?: CallOverrides): Promise<string[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getScores(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTitle(overrides?: CallOverrides): Promise<string>;

  hasVoted(overrides?: CallOverrides): Promise<boolean>;

  malformed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  malformedCount(overrides?: CallOverrides): Promise<BigNumber>;

  none(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  noneCount(overrides?: CallOverrides): Promise<BigNumber>;

  report(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportCount(overrides?: CallOverrides): Promise<BigNumber>;

  score(
    element: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVoters(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editTitle(
      newTitle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDescription(overrides?: CallOverrides): Promise<string>;

    getExtras(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getLabels(overrides?: CallOverrides): Promise<string[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getScores(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTitle(overrides?: CallOverrides): Promise<string>;

    hasVoted(overrides?: CallOverrides): Promise<boolean>;

    malformed(overrides?: CallOverrides): Promise<void>;

    malformedCount(overrides?: CallOverrides): Promise<BigNumber>;

    none(overrides?: CallOverrides): Promise<void>;

    noneCount(overrides?: CallOverrides): Promise<BigNumber>;

    report(overrides?: CallOverrides): Promise<void>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    score(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVoters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editTitle(
      newTitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDescription(overrides?: CallOverrides): Promise<BigNumber>;

    getExtras(overrides?: CallOverrides): Promise<BigNumber>;

    getLabels(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getScores(overrides?: CallOverrides): Promise<BigNumber>;

    getTitle(overrides?: CallOverrides): Promise<BigNumber>;

    hasVoted(overrides?: CallOverrides): Promise<BigNumber>;

    malformed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    malformedCount(overrides?: CallOverrides): Promise<BigNumber>;

    none(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    noneCount(overrides?: CallOverrides): Promise<BigNumber>;

    report(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    score(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVoters(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editTitle(
      newTitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtras(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLabels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTitle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVoted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    malformed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    malformedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    none(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    noneCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    report(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    score(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
