/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type QuestionMetaStruct = {
  owner: PromiseOrValue<string>;
  title: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  labels: PromiseOrValue<string>[];
  scores: PromiseOrValue<BigNumberish>[];
  extras: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
};

export type QuestionMetaStructOutput = [
  string,
  string,
  string,
  string[],
  BigNumber[],
  [BigNumber, BigNumber, BigNumber]
] & {
  owner: string;
  title: string;
  description: string;
  labels: string[];
  scores: BigNumber[];
  extras: [BigNumber, BigNumber, BigNumber];
};

export interface QuestionInterface extends utils.Interface {
  functions: {
    "accept(uint256)": FunctionFragment;
    "acceptExtra(uint8)": FunctionFragment;
    "editDescription(string)": FunctionFragment;
    "produceQuestionMeta()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accept"
      | "acceptExtra"
      | "editDescription"
      | "produceQuestionMeta"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accept",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptExtra",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editDescription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "produceQuestionMeta",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptExtra",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "produceQuestionMeta",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Question extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptExtra(
      option: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editDescription(
      _newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    produceQuestionMeta(
      overrides?: CallOverrides
    ): Promise<[QuestionMetaStructOutput]>;
  };

  accept(
    element: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptExtra(
    option: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editDescription(
    _newDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  produceQuestionMeta(
    overrides?: CallOverrides
  ): Promise<QuestionMetaStructOutput>;

  callStatic: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptExtra(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editDescription(
      _newDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    produceQuestionMeta(
      overrides?: CallOverrides
    ): Promise<QuestionMetaStructOutput>;
  };

  filters: {};

  estimateGas: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptExtra(
      option: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editDescription(
      _newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    produceQuestionMeta(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accept(
      element: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptExtra(
      option: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editDescription(
      _newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    produceQuestionMeta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
